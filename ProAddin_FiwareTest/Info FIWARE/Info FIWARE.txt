===================================================================================================
Pro Fiware

Project:
https://app.asana.com/0/1204285422260806/1204530723943675/
old: https://bitbucket.org/msgis/fiwaresummit-arcgispro
https://github.com/msgis/arcgis-fiware.git

Author:
mailto:roman.trojan@msgis.com
Time:
[0141] Fiware.Summit _ms.GIS.Intern PRJ.Fiware_Summit
[0200] LAB _ms.GIS.Intern LAB.FIWARE

===================================================================================================

---------------------------------------------------------------------------------------------------
History
---------------------------------------------------------------------------------------------------

...................................................................................................
Der Context-Broker (REST API) ist aufgesetzt:
 
Alle EntityTypes holen: 
https://fiwaredev.msgis.net/ngsi-ld/v1/types 

Entities zu einem Type holen: 
https://fiwaredev.msgis.net/ngsi-ld/v1/entities?type=<type> 
Beispiel: https://fiwaredev.msgis.net/ngsi-ld/v1/entities?type=Hydrant 
Achtung! Es werden standardmäßig nur die ersten 20 Entities zurückgeliefert. 
Um alle Entities zu Erhalten, müssen mehrere Requests mit den Parametern offset und limit durchgeführt werden. Limit kann max. 2000 sein. 
Beispiel: 20 Entities holen ab dem 1000sten Entity: 
https://fiwaredev.msgis.net/ngsi-ld/v1/entities?type=Hydrant&offset=100&limit=20 
Im Prinzip muss man einfach bei offset 0 starten und bei den nächsten Requests offset jeweils um limit erhöhen, solange bis ein leeres Array zurückkommt. 

Die Benachrichtigungen über Änderungen eines Entities sind über Server Send Events implementiert,
siehe https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events. 
Das ist im Prinzip ein nicht Endender HTTP Request welcher die JSON Daten als Stream sendet. 
Diese Schnittstelle muss ich allerdings noch konfigurieren/aufsetzen.

...................................................................................................
Die Event Source APIS sind nun auch aktiv. Es gibt eine Schnittstelle für jeden Type:
Trinkbrunnen: https://fiwaredev.msgis.net/ngsi-proxy/eventsource/de70cc50-f969-11ed-926f-1bdc1977e2d3
Schwimmbad: https://fiwaredev.msgis.net/ngsi-proxy/eventsource/de731640-f969-11ed-926f-1bdc1977e2d3
Hydrant: https://fiwaredev.msgis.net/ngsi-proxy/eventsource/de72ef30-f969-11ed-926f-1bdc1977e2d3

Die APIs stellen jeweils eine Server-sent Events (auch EventSource genannt) API zur Verfügung, siehe https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events.
Sobald sich eine Entity ändert, wird eine neue Nachricht über die API gesendet. Eine Nachricht/Message sieht dann so aus: 

{
  "callback_id": "de7909b0-f969-11ed-926f-1bdc1977e2d3",
  "payload": "{\"id\":\"urn:ngsi-ld:Notification:08f53bf0-f96a-11ed-b542-0242ac120003\",\"type\":\"Notification\",\"subscriptionId\":\"urn:ngsi-ld:Subscription:de7b7358-f969-11ed-b542-0242ac120003\",\"notifiedAt\":\"2023-05-23T13:02:13.045Z\",\"data\":[{\"id\":\"urn:ngsi-ld:Hydrant:HYDRANTOGD.36612499\",\"type\":\"Hydrant\",\"OBJECTID\":36612499,\"location\":{\"type\":\"Point\",\"coordinates\":[16.45231,48.157012,161.78]}}]}",
  "headers": {
    "host": "ngsiproxy:3000",
    "user-agent": "orion/1.15.0-next libcurl/7.61.1",
    "fiware-servicepath": "/",
    "accept": "application/json",
    "content-length": "378",
    "content-type": "application/json; charset=utf-8",
    "ngsiv2-attrsformat": "keyValues",
    "link": "<https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
  }
}

In payload ist dann das geänderte Objekt als JSON String enthalten.
Falls die Implementierung in QGIS/ArcPro zu schwierig ist, dann müssen wir und eine Alternative überlegen (zb. polling).

...................................................................................................
Es gibt eine HTTP Schnittstelle über die Nachrichten reinkommen wenn Entities geändert wurden.
Das geht dann über Server Send Events (auch EventSource genannt).
Jeder Entity Type (Layer) hat eine eigene EventSource URL. Diese bekommt man auch über die API:
https://fiwaredev.msgis.net/ngsi-ld/v1/entities?type=NgsiProxyConfig

Also der Workflow wäre:
User wählt Entity Type aus Combobox aus
Abfrage der API damit man die EventSource URL zu dem ausgwähltem Typ bekommt:
https://fiwaredev.msgis.net/ngsi-ld/v1/entities?type=NgsiProxyConfig
Request auf die EventSource URL und ständig nach Änderungen lauschen.
zb:
using (var client = new HttpClient())
{
  using (var stream = await client.GetStreamAsync("https://fiwaredev.msgis.net/ngsi-proxy/eventsource/e9e01390-fae3-11ed-926f-1bdc1977e2d3"))
  {    using (var reader = new StreamReader(stream))
    {
      while (true)
      {
        Console.WriteLine(reader.ReadLine());
      }
    }
  }
}

AF:
Der eventsource request sollte im Hintergrund die ganze Zeit laufen.
Dort werden die geänderten entities übertragen.
Aber wenn das Feature jetzt nicht implementiert ist macht es auch nichts. Wichtiger ist die Anzeige der entities.

RT:
"die ganze Zeit" macht für mich keinen Sinn, wenn dann vor/während einer UI-Interaktion (Combo-Auswahl, Button-Holen, etc.)

AF:
Hier ein Beispiel mit CURL:

zuerst den Request zur EventSource URL (hier für die Hydranten), dieser bleibt offen:
curl -N "https://fiwaredev.msgis.net/ngsi-proxy/eventsource/e9e01390-fae3-11ed-926f-1bdc1977e2d3"
und dann ein Attribut eines Hydranten in einem anderen Command Window oder über Postman ändern:
curl --location --request PATCH 'https://fiwaredev.msgis.net/ngsi-ld/v1/entities/urn:ngsi-ld:Hydrant:HYDRANTOGD.36612499/attrs/OBJECTID' --header 'Content-Type: application/json' --data '{"value": 36612499,"type": "Property"}'
In der Ausgabe des ersten Commands sollte dann ein neues Event gesendet werden mit einem "data" Anteil. Dort ist die id des geänderten Objektes (etwas verschachtelt).

...................................................................................................
Hallo, Ich habe lange probiert und konnte bisher keinen neuen ArcPro Projekt erzeugen!
Für die Version 3.0.3* kann ich keine passende SDK finden (entweder 2.9 oder 3.1)
Nun versuche ich ArcPro 3.1 auf meinem Notebook zu installieren.

Hallo, für ArcPro 3.0.3.36057 gibt es gar keine SDK (und so auch keine Unterstützung für neues Projekt).
Entweder 3.1.41833, 3.0.0.36056 oder ältere Versionen.
Oder unter einer anderen Version neues Projekt erstellen und modifizieren.
Nun konnte ich so eines anlegen (mit 3.1 auf Notebook).

ArcGIS new projekt/versions:
https://github.com/Esri/arcgis-pro-sdk/tags

...................................................................................................
GeoJSON/JSON to Features:

https://enterprise.arcgis.com/de/portal/latest/use/geojson.htm#:~:text=GeoJSON%20ist%20ein%20offenes%20Standardaustauschformat,Encodierung%20verschiedener%20Strukturen%20geographischer%20Daten.
https://pro.arcgis.com/en/pro-app/latest/tool-reference/conversion/json-to-features.htm
https://pro.arcgis.com/en/pro-app/latest/help/analysis/geoprocessing/basics/find-geoprocessing-tools.htm

Für die Programmierung (c#) JSON-Feature gibt es folgende Funktion:
GeometryEngine.Instance.JsonToGeometry(geometry.ToString())

...................................................................................................
Ich werde vorerst EntityTypes holen...

Alle EntityTypes holen: 
https://fiwaredev.msgis.net/ngsi-ld/v1/types 

{
	"id": "urn:ngsi-ld:EntityTypeList:79576476-fa42-11ed-9e52-0242ac120003",
	"type": "EntityTypeList",
	"typeList": ["Hydrant", "Schwimmbad", "Trinkbrunnen"]
}

...................................................................................................
Version 3.3.01
"Entity type" kann per ComboBox ausgewählt werden.

QGIS
P:\MS\TESTHOUSE\gto-qgis3\gto
QGIS-OSGeo4W-3.28.4-3.msi

import requests
import time
import json
from osgeo import ogr

prj=QgsProject.instance()
layer=prj.mapLayersByName('Hydranten')[0]
res = requests.get('https://fiwaredev.msgis.net/ngsi-ld/v1/types', auth=('', ''))
print(res.json())
offset = 0
limit = 20
_type = 'Hydrant'

features=[]
while res.status_code == 200:
    req = 'https://fiwaredev.msgis.net/ngsi-ld/v1/entities?type={0}&offset={1}&limit={2}'.format(_type, offset, limit)
    res = requests.get(req, auth=('', ''))
    print(req, res.status_code)
    for enty in res.json():
        geojson = enty['location']['value']
        print(geojson)
        print(enty)
        string = json.dumps(geojson)
        geom = ogr.CreateGeometryFromJson(string)
        geom = QgsGeometry.fromWkt(geom.ExportToWkt())
        feat=QgsVectorLayerUtils.createFeature(layer)
        feat.setGeometry(geom)
        features.append(feat)
    time.sleep(0.05)
    offset = offset + limit
    if offset > 100:
        print('mehr als 1000')
        break
layer.dataProvider().addFeatures(features)

...................................................................................................
Version 3.3.02
Nach einer Besprechung mit GP hole ich die EntityTypes direkt per REST-Api (wie bei QGIS).
JSON-File wird nicht mehr benötigt, kann auf Wunsch erzeugt oder ausgewertet werden.
"Entity type" kann per ComboBox ausgewählt werden.
Siehe auch ReadMe FIWARE.txt

...................................................................................................
Version 3.3.03
Entities zu einem Type holen und als Layer zeigen.

  "value": {
    "type": "Point",
    "coordinates": [
      16.264293,
      48.20284
    ]
  }

  "location": {
    "type": "GeoProperty",
    "value": {
      "type": "Point",
      "coordinates": [
        16.429548,
        48.163505
      ]
    }

Die Entities werden laut ausgewähltem Typ direkt per REST-Api in ein JArray geladen und zu einem vordefinierten Layer hinzugefügt.
Alle zuvor vorhandenen Objekte am Layer werden gelöscht.

Geplant:
Layer Objekte mit Attribut "Typ" versehen, damit nur die entsprechenden Objekte gelöscht werden und auch später besser identifiziert werden können.
Löschen der Objekte entsprechend "Typ".
Löschen aller Objekte (Reset).
Dynamischer Update anhand per REST-Api. 

...................................................................................................
3.3.04/20231127/rt: New Version.
InstVer=ArcPro_3.0.3.36057 AddInX_3.3.04 Common_3.3.31 MSI_

3.3.30/20231122/msGIS_ProApp_Common_rt_054: New Project/Namespace FIWARE.
3.3.31/20231123/msGIS_ProApp_Common_rt_055: Projects "_3x".

...................................................................................................
3.3.05/20231214/rt: New Version.
InstVer=ArcPro_3.0.3.36057 AddInX_3.3.05 PluginDatasource_FIWARE_3.3.05 Common_3.3.31 MSI_

3.3.05/20231128/msGIS_FIWARE_rt_001: Integration ArcGIS PRO.
https://app.asana.com/0/1203876411184345/1205999834711034/
Daten nicht per RestApi, sondern über eigenen Data Provider PlugIn (read only).


NuGet NGSIBaseModel
This is a multi-purpose parser for the NGSI10 standard.
The NGSI10 standard is a the default standard used by ORION the main Componnent of the FIWARE project.
This parser is able to simply convert the Json objects received in the NGSI format (both standard and keyValues) to C# Models.
And also convert Java classes to the equivalent and compliant NGSI10 entities.

FIWARE.Orion.Client
A portable .NET library for the FIWARE Orion Context Broker

ERGON.OwinOAuth2.FiWareAuth
The Owin OAuth2 Implimentation for FiWarelab


Connection in ArcPro integrieren
Framework anmelden
FIREWARE Connection
Templates
Test-Driver
Show data on graphics overlay!

Data.PlugIn.Datasource
PlugIn DataSource Template Class
Read only


ArcGIS.Core.Data.PluginDatastore Namespace
https://pro.arcgis.com/en/pro-app/latest/sdk/api-reference/topic21958.html
Plugin Datasources
https://github.com/esri/arcgis-pro-sdk/wiki/ProSnippets
ProConcepts Plugin Datasources
https://github.com/esri/arcgis-pro-sdk/wiki/ProConcepts-Plugin-Datasources
ProGuide Plugin Datasources (SimplePointPlugin)
https://github.com/esri/arcgis-pro-sdk/wiki/ProGuide-Plugin-Datasources

The Plugin Datasource framework allows developers to make custom datasources available for use in Pro.
ArcGIS Pro treats these data sources as read-only tables or feature classes.
Pro can use these data sources to execute queries, perform analysis, and display features on a map.

Implementing the Datastore
There are three classes that must be created by the developer to implement a Plugin Datasource.
1. Pro Plugin Datasource Template Class.
https://pro.arcgis.com/en/pro-app/latest/sdk/api-reference/topic21975.html
2. Pro Plugin Table Template Class.
https://pro.arcgis.com/en/pro-app/latest/sdk/api-reference/topic22017.html
3. Pro Plugin Cursor Template Class.
https://pro.arcgis.com/en/pro-app/latest/sdk/api-reference/topic21960.html


Plugin Datasources (ProSqlExpressPluginDatasource 18:00 - 30:00)
https://mediaspace.esri.com/media/t/1_gpsfiskh
24:40 'ArcGIS Pro PlugIn' Project Template
18:00 DAML Integration.
<PluginDatasources>
  <PluginDatasource id="XxxPluginDatasourceXxx" class="xxx" ...
19:30 PluginDatasourceConnectionPath object, which inherits from the Connector base class
20:45 New PluginDatastore(conSql), GetTableNames(), OpenTable(tableName), LayerFactory.Instance.CreateFeatureLayer

3.3.05/20231201/msGIS_FIWARE_rt_002: Nicht überwindbare Komplikation auf HttpClient mittels GetAsync(apiUrl) aus der abstrakten Klasse ArcPro PluginDatasourceTemplate zuzugreifen.
Ich versuche die Integration entsprechend allen Hinweisen zu implementieren.
Leider ergibt sich eine für mich bisher nicht überwindbare Komplikation auf HttpClient mittels GetAsync(apiUrl) aus der abstrakten Klasse ArcPro PluginDatasourceTemplate zuzugreifen.
Ich werde daher auf anderen Wegen auf die Inhalte von FIWARE zugreifen müssen als direkt in den abstrakten Klassen.
Anbei meine Anfragen an AI.
https://chat.openai.com/share/a04629a6-ae7a-43ab-9987-107028365489

3.3.05/20231205/msGIS_FIWARE_rt_003: EntitiesToFile for use with SimplePointPlugin.
3.3.05/20231206/msGIS_FIWARE_rt_004: Expertise FIWARE Integration ArcGIS PRO.
Die FIWARE Daten werden mittels REST API async Task HttpClient.GetAsync(string? requestUri) - Json - EntityTypes bzw. Entities(Type) geladen.
Für die Darstellung habe ich folgende Möglichkeiten evaluiert.
1.
Die Datensätze werden zu einem zuvor angelegten Layer/Datasource mittels EditOperation.Delete/Create hinzugefügt.
Der Layer könnte auch programmatisch erzeugt werden.
2.
Mittels Pro PluginDatastore kann ein beliebiges Datenformat per URI definiert werden (Connection Properties oder File).
Ich habe URI per File-Formatierung evaluiert ("POINT_X,POINT_Y,NAME").
Mit dem spezifischen Datastore (AddInx mit Plugin) können die Daten programmatisch hinzugefügt und verwaltet werden.
Dabei wird Datasource direkt mit dem spezifischen Format verknüpft.

Betreffend Evaluierung Video zu Plugin Datasources basierend auf SqlExpress
https://mediaspace.esri.com/media/t/1_gpsfiskh
konnte ich die Anwendung wegen nicht funktionierender Connection nicht evaluieren.
Es ist nicht so wichtig, weil das Prinzip für Plugin Datastore ist ähnlich wie aus einem Folder mit File-Format.
SqlExpress.sqlexpress
Server=localhost\sqlexpress;Database=TestSqlExpress;Integrated Security=SSPI;
Server=localhost\sqlexpress;Database=FdTestSqlExpress;Integrated Security=SSPI;
TestSqlExpress.mdf
FDTestSQLExpress.mdf
Der Author hat die Daten aus ArcMap GDB importiert, diese Daten finde ich aber nicht. Verfügbar sind die *.mdf Daten, welche ich nicht öffnen kann.
Dabei konnte ich SQL Server (Express) nicht entsprechend konfigurieren.

3.3.05/20231207/msGIS_FIWARE_rt_005: ProPluginDatasource Integration for SimplePoint File-Format.
+ RBushCoord3D (Spatial Index data structure; used to make it easier to find data points on a two dimensional plane).
+ Programmatically create Layer based on Pro Plugin Datasource.
+ Configurable data path.

Das CSV File-Format ist für die Evaluierung nicht gut geeignet,
da ArcPro es per Default tabellarisch unterstützt und es wird verwirrend wann das eigene Datastore Plugin zugreift.
Daher habe ich ein willkürliches File-Format eingeführt "*.fiw" mit dem Datasource verknüpft wird.
Mit einem spezifischen Datastore (AddInx mit Plugin) können die Daten programmatisch, jedoch derzeit nicht manuell mit ArcPro Steuerung hinzugefügt werden.
Das manuelle Hinzufügen dürfte anhand Beispiel basierend auf SqlExpress möglich sein (noch nicht evaluiert wegen für mich nicht verständlicher Konfiguration der Daten/Verbindung).
Alle Variationen setzen vorgehende Konvertierung der FIWARE Daten, wobei eigene Formatierungen mittels Datastore Plugin nur einen Read-Only Modus zulassen.
Die Komplikation beim Zugriff auf HttpClient mittels GetAsync(apiUrl) aus der abstrakten Klasse ArcPro PluginDatasourceTemplate bleibt bestehen.
Insgesamt würde ich für die FIWARE Integration von Datastore Plugin abraten und tendiere zu einem von ArcPro direkt unterstütztem Format/Datenbank (CRUD).

Die Daten zu einmal erzeugtem Layer werden entsprechend Datastore beim Öffnen von APRX geladen.
Um die Updates von FIREWARE Daten zu visualisieren müsste im Fall von Read-Only Datastore Plugin das ArcPro Projekt (APRX) nach Aktualisierung von Datasource neu geladen werden.

Im ArcPro UI können eigene Elemente per AddinX hinzugefügt werden z.B. im Catalog Pane die Inhalte basierend auf eigenem Datasource Format (definiert per Datastore Plugin).
ArcPro macht das alles also nicht automatisch, sondern bietet Möglichkeiten UI zu erweitern oder verändern.
Es scheint ziemlich aufwendig, daher wäre eine gezielte Spezifikation angebracht.

Im ArcPro UI können verschiedene Elemente mit Inhalten per AddinX zu Catalog Pane hinzugefügt werden. Es könnten z.B. FIWARE Entities ausgelistet und beim Klick auf einen Typ die Daten grafisch dargestellt werden.
Diese Vorgangsweise würde keinen Datastore Plugin verwenden.
Natürlich könnte eine Kombination stattfinden.

Zum Installieren von Pro Plugin (ohne MSBuild.exe oder Visual Studio) ist zusätzlich *.esriPlugin Archiv notwendig.
msGIS.ProApp_FiwareTest.esriAddinX
msGIS.ProPluginDatasource_EntityFile.esriPlugin
MSBuild.exe
C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Bin\MSBuild.exe
Für das Testen von Pro Datastore Plugin ist neben der Installation von esriPlugin (zusätzlich zu esriAddinX) auch zu beachten,
dass bei der Entwicklung teilweise SDK/Community Ansätze verwendet werden und daher manche Abläufe derzeit nur unter USA System-Einstellungen funktionieren (Zahlen mit Punkt/Komma).

+ Always use newest ArcPro Version for FIWARE (3.2 upwards on NB536-11).
+ Check Error with Plugin on 3.2 (AZ) Button_FileToDsfLayer.
+ Install esriPlugin (in plugin bin folder).
+ Update ReadMe FIWARE (Install).
+ Build (Make + Install) modifications.

...................................................................................................
3.3.06/20231221/rt: New Version.
InstVer=ArcPro_3.2.49743 AddInX_3.3.06 PluginDatasource_FiwareTest_3.3.06 Common_3.3.32 MSI_
https://app.asana.com/0/1203876411184345/1205999834711034/

3.3.06/20231214/msGIS_FIWARE_rt_006: Rename FiwareSummit to FiwareTest/EntityFile (Project, Namespace, Module, ID, Plugin).

3.3.32/20231215/msGIS_ProApp_Common_rt_057: Fiware RestApi NetHttpClient.

3.3.06/20231218/msGIS_FIWARE_rt_007: ProPluginDatasource_FiwareHttpClient.
https://pro.arcgis.com/en/pro-app/latest/sdk/api-reference/topic9058.html
Ich konnte die Problematik bezogen auf NetHttpClient.GetAsync/EsriHttpClient.Get lösen.
Die synchrone Funktion "EsriHttpClient.Get" bringt insofern nichts, weil in der Folge für "esriHttpResponse.Content.ReadAsStringAsync" keinen synchronen Adäquat gibt.
Daher verwende ich asynchrone Funktion "esriHttpClient.GetAsync", welche gleiche Resultate liefert wie "httpClient.GetAsync".
Der asynchrone Aufruf aus override Routine in der abstrakten Klasse vom Plugin Datasource funktioniert nun doch.
Zuvor hat sich bei der Übergabe von Uri über Plugin im Vergleich zu direktem Aufruf ein "/" eingeschlichen.
Zusätzlich warte ich in der synchronen Routine auf die asynchrone Ausführung mittels System-Task, nachdem ich für Esri-QueuedTask keine entsprechende Möglichkeit gefunden habe (entweder blockiert oder wartet nicht).

3.3.06/20231221/msGIS_FIWARE_rt_008: Datasource URI.
Im PluginDatasourceTemplate override Open(Uri connectionPath) ist von ArcGIS Pro nur eine konstante URI vorgesehen.
Damit für FIWARE die HTTP requests parametrisiert dynamisch aufgerufen werden können, habe ich eigene Struktur auf Plugin-Ebene etabliert.

...................................................................................................
3.3.07/20240108/rt: New Version.
InstVer=ArcPro_3.2.49743 AddInX_3.3.07 ProPlugin_3.3.07 Common_3.3.32 MSI_
https://app.asana.com/0/1203876411184345/1205999834711034/

3.3.07/20231222/msGIS_FIWARE_rt_009: Plugin integration.

3.3.07/20231222/msGIS_FIWARE_rt_010: Open Plugin table and read the data.
Neuer Layer wird aus FIWARE Daten mittels Datasource Plugin erstellt (ohne Umweg über File).

...................................................................................................
3.3.08/20240109/rt: New Version.
InstVer=ArcPro_3.2.49743 AddInX_3.3.08 ProPlugin_3.3.08 Common_3.3.32 MSI_
https://app.asana.com/0/1203876411184345/1205999834711034/

3.3.08/20240109/msGIS_FIWARE_rt_011: Progress ERROR: The calling thread must be STA, because many UI components require this.
STA error typically occurs when trying to access UI components from a thread that isn't marked as STA (Single Threaded Apartment).

3.3.08/20240109/msGIS_FIWARE_rt_012: Init Fiware_RestApi_NetHttpClient before Plugin Datasource OpenTable/GetTableNames.
In dieser Version werden beim Öffnen von Projekt die bereits vorhandenen Layers mittels Datasource Framework anhand von Plugin Spezifikation entsprechend den FIWARE Daten befüllt.
---
Currently, the ArcGIS Pro Plugin Datastore Framework only supports ArcGIS.Core.Data.DatasetType.Tables and ArcGIS.Core.Data.DatasetType.FeatureClasss in a read-only manner.
.NET Clients access Open via the ArcGIS.Core.Data.PluginDatastore.PluginDatastore class whereas Native clients (Pro internals) access via IWorkspaceFactory
e.g. Data Source = Feature Class
- Native clients (Pro internals) access via IWorkspaceFactory
(Layer ist beim Öffnen von Projekt bereits vorhanden)
Data Source Location: P:\MS\link\roman\fiware\ArcPro\APRX_WGS84\https:\fiwaredev.msgis.net\
- NET Clients access Open via the ArcGIS.Core.Data.PluginDatastore.PluginDatastore class
(Layer wird erstellt)
Data Source Location: https://fiwaredev.msgis.net/

...................................................................................................
3.3.09/20240117/rt: New Version.
InstVer=ArcPro_3.2.49743 AddInX_3.3.09 ProPlugin_3.3.09 Common_3.3.34 MSI_
https://app.asana.com/0/1203876411184345/1205999834711034/

3.3.33/20240110/msGIS_ProApp_Common_rt_058: Fiware RBush Helper.
+ RBushCoord3D --> Common.

+ VS not active (dashed) labels?
Bookmarks window, Disable or delete bookmarks.
https://learn.microsoft.com/en-us/visualstudio/ide/setting-bookmarks-in-code?view=vs-2022

+ VS Output Window configuration on Build.
To display the Output window whenever you build a project, in the Options dialog box, on the Projects and Solutions > General page, select Show Output window when build starts.

3.3.09/20240110/msGIS_FIWARE_rt_013: Adaptations for correct data calculating on any language system settings (Windows EN/DE) using CultureInfo.InvariantCulture.

+ Evaluate SqlExpress using MDF-Connection.
Betreffend Evaluierung Video zu Plugin Datasources basierend auf SqlExpress
https://mediaspace.esri.com/media/t/1_gpsfiskh
SqlExpress.sqlexpress
Server=localhost\sqlexpress;Database=TestSqlExpress;Integrated Security=SSPI;
Server=localhost\sqlexpress;Database=FdTestSqlExpress;Integrated Security=SSPI;
---
Die Connection konnte mit Jürgen Zornig hergestellt werden.
Unter Windows sind Berechtigungen zu beachten und einige Schritte bei der Konfiguration vorzunehmen.
https://teams.microsoft.com/l/message/19:4c4d6429e9114cbbab8f8246fe88c201@thread.tacv2/1701867142158?tenantId=080b5d1b-8662-46e8-a975-a4485f9f4cc2&groupId=53a2a971-07e9-44b9-8944-5862cdeb72c1&parentMessageId=1701867142158&teamName=GeoSolutions&channelName=Hilfe%20bei%20GIS%20Problemen&createdTime=1701867142158
https://www.microsoft.com/en-us/sql-server/sql-server-downloads
C:\Data\PluginData\SQLExpressData
TestSqlExpress.mdf, TestSqlExpress_log.ldf
FDTestSQLExpress.mdf, FDTestSQLExpress_log.ldf
---
Look at Services App for "SQL Server (SQLEXPRESS)" - MSSQL$SQLEXPRESS - must be running.
Or start SQL Server Configuration Manager - SQL Server Services - SQL Server (SQLEXPRESS) - Properties - NT Service\MSSQL$SQLEXPRESS - Service must be running.
Copy sample connection data (*.?df) to SQLExpress folder.
C:\Program Files\Microsoft SQL Server\MSSQL16.SQLEXPRESS\MSSQL\DATA
Due to inheritance the file permissions - security should now gain MSSQL$SQLEXPRESS user with full access control.
The required permissions may not succeed on other folder (?)
On Microsoft SQL Server Management Studio make the connection.
Server Type: Database Engine
Server Name: localhost\SQLExpress (localhost may be computer name like "NB536-11")
Authentication: Windows Authentication (connection like "MD\roman")
Attach Database - Add - navigate to *.mdf
C:\Program Files\Microsoft SQL Server\MSSQL16.SQLEXPRESS\MSSQL\DATA


+ ArcPro Version.
+ Rename Layer doesn't impact created table name.
+ Query/Search table rows on create.

3.3.09/20240110/msGIS_FIWARE_rt_014: Configurable URI.
ConnectionPath of override PluginDatasourceTemplate.URI.Open may be used for delivery complex parameters to proceed with tasks on tables and entries.
+ Manage URI parameters as JSON string in Data Source Path (configurable on AddInX, read only on Plugin).
+ JSON string is not suitable for connection string.
+ Reduce not recognized connection 3x Error.
+ AddInX UI must have configurable URI parameters.
+ New Version for presentations.

...................................................................................................
3.3.10/2024mmdd/rt: New Version.
InstVer=ArcPro_3.2.49743 AddInX_3.3.10 ProPlugin_3.3.10 Common_3.3.35 MSI_
https://app.asana.com/0/1203876411184345/1205999834711034/

3.3.35/20240118/msGIS_ProApp_Common_rt_059: Plugin Version.
+ Message Version on unrecognized table?

- AddInX for FIWARE Http Client only on BitBucket (without other Tests, for any APRX).
- More dynamic attributes with types.
- Cache, Refresh, Extent?

- Configure ArcPro UI to manually add/manage the data (Catalog, AddData Button/Item, Set Data Source, etc.).
DAML: <updateCategory refID="esri_core_projectContainers"> --> ProDataProjectItemContainer : CustomProjectItemContainer<ProDataProjectItem>.
DAML: <updateCategory refID="esri_customItems"> --> ProDataProjectItem : CustomProjectItemBase, IMappableItem.
Samples: Content_QuakeItem, Plugin_ProDataReader, Plugin_ProSqlExpress.

- Dynamically update changes on entities (NGSI data) - not possible in a datasource read-only manner, therefore all data has to be re-read.
- Manage current loaded data using extent-filter to reduce memory consumption.
- Use NuGet NGSIBaseModel to convert the Json objects received in the NGSI format to C# models.
- Convert FIWARE REST - CRUD Datasource (not possible using Pro Plugin Datasource).


---------------------------------------------------------------------------------------------------
rt: Next 3.3.10/2024mmdd/msGIS_FIWARE_rt_015: Xxx
To build an AddInX look for instructions at common folder.
---------------------------------------------------------------------------------------------------
