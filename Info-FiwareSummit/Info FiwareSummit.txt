===================================================================================================
FiwareSummit

Install:
P:\MS\link\roman\FiwareSummit
C:\Users\[user]\Documents\ArcGIS\AddIns\ArcGISPro

Project:
https://app.asana.com/0/1204285422260806/1204530723943675/

Author:
mailto:roman.trojan@msgis.com
Time:
[0141] Fiware.Summit _ms.GIS.Intern PRJ.Fiware_Summit

AddinX:
https://bitbucket.org/msgis/fiwaresummit-arcgispro/src/master/
https://app.asana.com/0/1204285422260806/1204530723943675/

===================================================================================================

---------------------------------------------------------------------------------------------------
History
---------------------------------------------------------------------------------------------------

...................................................................................................
Der Context-Broker (REST API) ist aufgesetzt:
 
Alle EntityTypes holen: 
https://fiwaredev.msgis.net/ngsi-ld/v1/types 

Entities zu einem Type holen: 
https://fiwaredev.msgis.net/ngsi-ld/v1/entities?type=<type> 
Beispiel: https://fiwaredev.msgis.net/ngsi-ld/v1/entities?type=Hydrant 
Achtung! Es werden standardmäßig nur die ersten 20 Entities zurückgeliefert. 
Um alle Entities zu Erhalten, müssen mehrere Requests mit den Parametern offset und limit durchgeführt werden. Limit kann max. 2000 sein. 
Beispiel: 20 Entities holen ab dem 1000sten Entity: 
https://fiwaredev.msgis.net/ngsi-ld/v1/entities?type=Hydrant&offset=100&limit=20 
Im Prinzip muss man einfach bei offset 0 starten und bei den nächsten Requests offset jeweils um limit erhöhen, solange bis ein leeres Array zurückkommt. 

Die Benachrichtigungen über Änderungen eines Entities sind über Server Send Events implementiert,
siehe https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events. 
Das ist im Prinzip ein nicht Endender HTTP Request welcher die JSON Daten als Stream sendet. 
Diese Schnittstelle muss ich allerdings noch konfigurieren/aufsetzen.

...................................................................................................
Die Event Source APIS sind nun auch aktiv. Es gibt eine Schnittstelle für jeden Type:
Trinkbrunnen: https://fiwaredev.msgis.net/ngsi-proxy/eventsource/de70cc50-f969-11ed-926f-1bdc1977e2d3
Schwimmbad: https://fiwaredev.msgis.net/ngsi-proxy/eventsource/de731640-f969-11ed-926f-1bdc1977e2d3
Hydrant: https://fiwaredev.msgis.net/ngsi-proxy/eventsource/de72ef30-f969-11ed-926f-1bdc1977e2d3

Die APIs stellen jeweils eine Server-sent Events (auch EventSource genannt) API zur Verfügung, siehe https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events.
Sobald sich eine Entity ändert, wird eine neue Nachricht über die API gesendet. Eine Nachricht/Message sieht dann so aus: 

{
  "callback_id": "de7909b0-f969-11ed-926f-1bdc1977e2d3",
  "payload": "{\"id\":\"urn:ngsi-ld:Notification:08f53bf0-f96a-11ed-b542-0242ac120003\",\"type\":\"Notification\",\"subscriptionId\":\"urn:ngsi-ld:Subscription:de7b7358-f969-11ed-b542-0242ac120003\",\"notifiedAt\":\"2023-05-23T13:02:13.045Z\",\"data\":[{\"id\":\"urn:ngsi-ld:Hydrant:HYDRANTOGD.36612499\",\"type\":\"Hydrant\",\"OBJECTID\":36612499,\"location\":{\"type\":\"Point\",\"coordinates\":[16.45231,48.157012,161.78]}}]}",
  "headers": {
    "host": "ngsiproxy:3000",
    "user-agent": "orion/1.15.0-next libcurl/7.61.1",
    "fiware-servicepath": "/",
    "accept": "application/json",
    "content-length": "378",
    "content-type": "application/json; charset=utf-8",
    "ngsiv2-attrsformat": "keyValues",
    "link": "<https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
  }
}

In payload ist dann das geänderte Objekt als JSON String enthalten.
Falls die Implementierung in QGIS/ArcPro zu schwierig ist, dann müssen wir und eine Alternative überlegen (zb. polling).

...................................................................................................
Es gibt eine HTTP Schnittstelle über die Nachrichten reinkommen wenn Entities geändert wurden.
Das geht dann über Server Send Events (auch EventSource genannt).
Jeder Entity Type (Layer) hat eine eigene EventSource URL. Diese bekommt man auch über die API:
https://fiwaredev.msgis.net/ngsi-ld/v1/entities?type=NgsiProxyConfig

Also der Workflow wäre:
User wählt Entity Type aus Combobox aus
Abfrage der API damit man die EventSource URL zu dem ausgwähltem Typ bekommt:
https://fiwaredev.msgis.net/ngsi-ld/v1/entities?type=NgsiProxyConfig
Request auf die EventSource URL und ständig nach Änderungen lauschen.
zb:
using (var client = new HttpClient())
{
  using (var stream = await client.GetStreamAsync("https://fiwaredev.msgis.net/ngsi-proxy/eventsource/e9e01390-fae3-11ed-926f-1bdc1977e2d3"))
  {    using (var reader = new StreamReader(stream))
    {
      while (true)
      {
        Console.WriteLine(reader.ReadLine());
      }
    }
  }
}

AF:
Der eventsource request sollte im Hintergrund die ganze Zeit laufen.
Dort werden die geänderten entities übertragen.
Aber wenn das Feature jetzt nicht implementiert ist macht es auch nichts. Wichtiger ist die Anzeige der entities.

RT:
"die ganze Zeit" macht für mich keinen Sinn, wenn dann vor/während einer UI-Interaktion (Combo-Auswahl, Button-Holen, etc.)

AF:
Hier ein Beispiel mit CURL:

zuerst den Request zur EventSource URL (hier für die Hydranten), dieser bleibt offen:
curl -N "https://fiwaredev.msgis.net/ngsi-proxy/eventsource/e9e01390-fae3-11ed-926f-1bdc1977e2d3"
und dann ein Attribut eines Hydranten in einem anderen Command Window oder über Postman ändern:
curl --location --request PATCH 'https://fiwaredev.msgis.net/ngsi-ld/v1/entities/urn:ngsi-ld:Hydrant:HYDRANTOGD.36612499/attrs/OBJECTID' --header 'Content-Type: application/json' --data '{"value": 36612499,"type": "Property"}'
In der Ausgabe des ersten Commands sollte dann ein neues Event gesendet werden mit einem "data" Anteil. Dort ist die id des geänderten Objektes (etwas verschachtelt).

...................................................................................................
Hallo, Ich habe lange probiert und konnte bisher keinen neuen ArcPro Projekt erzeugen!
Für die Version 3.0.3* kann ich keine passende SDK finden (entweder 2.9 oder 3.1)
Nun versuche ich ArcPro 3.1 auf meinem Notebook zu installieren.

Hallo, für ArcPro 3.0.3.36057 gibt es gar keine SDK (und so auch keine Unterstützung für neues Projekt).
Entweder 3.1.41833, 3.0.0.36056 oder ältere Versionen.
Oder unter einer anderen Version neues Projekt erstellen und modifizieren.
Nun konnte ich so eines anlegen (mit 3.1 auf Notebook).

ArcGIS new projekt/versions:
https://github.com/Esri/arcgis-pro-sdk/tags

...................................................................................................
GeoJSON/JSON to Features:

https://enterprise.arcgis.com/de/portal/latest/use/geojson.htm#:~:text=GeoJSON%20ist%20ein%20offenes%20Standardaustauschformat,Encodierung%20verschiedener%20Strukturen%20geographischer%20Daten.
https://pro.arcgis.com/en/pro-app/latest/tool-reference/conversion/json-to-features.htm
https://pro.arcgis.com/en/pro-app/latest/help/analysis/geoprocessing/basics/find-geoprocessing-tools.htm

Für die Programmierung (c#) JSON-Feature gibt es folgende Funktion:
GeometryEngine.Instance.JsonToGeometry(geometry.ToString())

...................................................................................................
Ich werde vorerst EntityTypes holen...

Alle EntityTypes holen: 
https://fiwaredev.msgis.net/ngsi-ld/v1/types 

{
	"id": "urn:ngsi-ld:EntityTypeList:79576476-fa42-11ed-9e52-0242ac120003",
	"type": "EntityTypeList",
	"typeList": ["Hydrant", "Schwimmbad", "Trinkbrunnen"]
}

...................................................................................................
Version 3.3.01
P:\MS\link\roman\FiwareSummit
"Entity type" kann per ComboBox ausgewählt werden.
Siehe auch
P:\MS\link\roman\FiwareSummit\3.0.3.36057_3.3.01\ReadMe FiwareSummit.txt

...................................................................................................
QGIS
P:\MS\TESTHOUSE\gto-qgis3\gto
QGIS-OSGeo4W-3.28.4-3.msi

import requests
import time
import json
from osgeo import ogr

prj=QgsProject.instance()
layer=prj.mapLayersByName('Hydranten')[0]
res = requests.get('https://fiwaredev.msgis.net/ngsi-ld/v1/types', auth=('', ''))
print(res.json())
offset = 0
limit = 20
_type = 'Hydrant'

features=[]
while res.status_code == 200:
    req = 'https://fiwaredev.msgis.net/ngsi-ld/v1/entities?type={0}&offset={1}&limit={2}'.format(_type, offset, limit)
    res = requests.get(req, auth=('', ''))
    print(req, res.status_code)
    for enty in res.json():
        geojson = enty['location']['value']
        print(geojson)
        print(enty)
        string = json.dumps(geojson)
        geom = ogr.CreateGeometryFromJson(string)
        geom = QgsGeometry.fromWkt(geom.ExportToWkt())
        feat=QgsVectorLayerUtils.createFeature(layer)
        feat.setGeometry(geom)
        features.append(feat)
    time.sleep(0.05)
    offset = offset + limit
    if offset > 100:
        print('mehr als 1000')
        break
layer.dataProvider().addFeatures(features)

...................................................................................................
Version 3.3.02
Nach einer Besprechung mit GP hole ich die EntityTypes direkt per REST-Api (wie bei QGIS).
JSON-File wird nicht mehr benötigt, kann auf Wunsch erzeugt oder ausgewertet werden.
"Entity type" kann per ComboBox ausgewählt werden.
Siehe auch ReadMe FiwareSummit.txt
P:\MS\link\roman\FiwareSummit

...................................................................................................
Version 3.3.03
Entities zu einem Type holen und als Layer zeigen.

  "value": {
    "type": "Point",
    "coordinates": [
      16.264293,
      48.20284
    ]
  }

  "location": {
    "type": "GeoProperty",
    "value": {
      "type": "Point",
      "coordinates": [
        16.429548,
        48.163505
      ]
    }

Layers/Tags:
    GraphicsLayer_Entities
    Entities_Points

---------------------------------------------------------------------------------------------------
